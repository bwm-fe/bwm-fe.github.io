<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 新品前端@百度外卖</title>
    <link>https://bwm-fe.github.io/post/index.xml</link>
    <description>Recent content in Posts on 新品前端@百度外卖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2017 17:11:31 +0800</lastBuildDate>
    <atom:link href="https://bwm-fe.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>前型组集成了检索模型组件，通过配置以上的检索页面模型进行抽象 - 林溪</title>
      <link>https://bwm-fe.github.io/post/post5/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post5/</guid>
      <description>&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/b355eb94jw1f5zol834y0j21w01w0hdt.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>小程序技术初体验 - 吴洋</title>
      <link>https://bwm-fe.github.io/post/about/</link>
      <pubDate>Mon, 13 Mar 2017 16:55:49 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/about/</guid>
      <description>

&lt;div
    style=&#34;
        background-size: cover;
        background-repeat: no-repeat;
        width: 100%;
        height: 400px;
    &#34;
    data-src=&#34;https://mp.weixin.qq.com/debug/wxadoc/dev/image/start_result.png?t=201733&#34;
    class=&#34;blured-image w3-card-8 filter-blur-15&#34;
&gt;
&lt;/div&gt;

&lt;h3 id=&#34;微信小程序&#34;&gt;微信小程序&lt;/h3&gt;

&lt;p&gt;说到引爆 2017 的前端话题，『微信小程序』当之无愧。微信小程序有着可以不需要下载安装、可以快捷传播和获取、出色使用体验的特点，被腾讯寄于连接用户与服务，实现应用『触手可及』的梦想的希望。&lt;/p&gt;

&lt;p&gt;从技术的角度看，其本质是一款基于微信的 web 离线包，微信开放平台提供了各式各样的动画和 API ，使得小程序的界面和过渡动画也更加美观、原生。用户在小程序里即用即走，不用考虑内存，硬件容量等问题，适合广大低频 APP。&lt;/p&gt;

&lt;h3 id=&#34;走进小程序&#34;&gt;走进小程序&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的技术栈&#34;&gt;1、小程序的技术栈&lt;/h4&gt;

&lt;p&gt;我们已经了解了小程序的产品定位，再看看小程序技术层面的问题。为了开发小程序，小程序对广大开发者提供了 WXML\WXSS 和高度封装的 WXAPI。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;WXML (WeiXin Markup Language)&lt;/dt&gt;
&lt;dd&gt;是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。&lt;/dd&gt;
&lt;dt&gt;WXSS（WeiXin Style Sheets)&lt;/dt&gt;
&lt;dd&gt;是一套样式语言，用于描述 WXML 的组件样式。WXSS 用来决定 WXML 的组件应该怎么显示。&lt;/dd&gt;
&lt;dt&gt;WXAPI&lt;/dt&gt;
&lt;dd&gt;是微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;同时，框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。&lt;/p&gt;

&lt;p&gt;什么是基础组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;组件是视图层的基本组成单元。&lt;/li&gt;
&lt;li&gt;组件自带一些功能与微信风格的样式。&lt;/li&gt;
&lt;li&gt;一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如说微信提供了视图容器 &lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;，可滚动视图区域 &lt;code&gt;&amp;lt;scroll-view&amp;gt;&lt;/code&gt;，滑块视图容器 &lt;code&gt;&amp;lt;swiper&amp;gt;&lt;/code&gt;，将原本开发者熟悉的 HTML 标签做了封装，直接用标签可以实现以前需要引入插件才能实现的滚动或滑块功能。这类高度封装的标签还有滚动选择器 &lt;code&gt;&amp;lt;picker&amp;gt;&lt;/code&gt;，可以用一个标签实现普通选择器，时间选择器，日期选择器。可谓是十分的方便快捷。&lt;/p&gt;

&lt;p&gt;在 JS 封装方面，由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document、window 等。微信的技术架构让我们不再需要直接调用这些习以为常的浏览器对象，用他们的一套技术方案就可以方便快捷的实现原本复杂的逻辑。他们将所有的浏览器对象隐藏，只对开发者提供一个名为 wx 的对象，提供了全面的诸如网络、媒体播放、文件上传、数据缓存、位置、设备信息、界面交互、登录、支付、模版消息等能力。没有了 cookie 的使用，本地缓存相关只能用 wx.setStorage 等 api 可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB。且 localStorage 是永久存储的。&lt;/p&gt;

&lt;h4 id=&#34;2-小程序的开发设置&#34;&gt;2、小程序的开发设置&lt;/h4&gt;

&lt;p&gt;对于小程序开发者，首先要做的是拿到管理员帐号，添加开发者白名单。然后在开发设置页面查看 AppID 和 AppSecret，配置服务器域名。第三步下载开发者工具进行代码的开发和上传。
小程序开发工具，严格规范开发者，每一步都需要扫码验证。同时小程序只支持 https 请求。&lt;/p&gt;

&lt;h3 id=&#34;外卖小程序技术架构&#34;&gt;外卖小程序技术架构&lt;/h3&gt;

&lt;p&gt;按照小程序官方建议的代码框架，小程序的文件结构包含一个描述整体程序的 app 和多个描述各自页面的 page。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/jiagou.png&#34; alt=&#34;外卖小程序技术架构&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app.js&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.json&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共设置。（我们可以对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.wxss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共样式表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;小程序的逻辑结构被微信分为了两个层。他们是这样描述的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这和我们当前使用的 MVVM 框架 vue 类似。但是不完全一样，小程序提供的框架严格禁止对 dom 的操作。
而外卖这边在构建小程序技术框架的时候加入了业务，技术架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/tech-jiagou.png&#34; alt=&#34;小程序技术框架&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pages&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面page&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;components&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;可以组成页面page的通用代码块&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;assets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面引入的静态资源库&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务公共逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;utils&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务需要的工具集&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adapter&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向下微信WXAPI访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;service&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向上服务端接口访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mock&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供本地的数据模拟&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;探索-生命周期&#34;&gt;探索 &amp;gt; 生命周期&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的生命周期&#34;&gt;1、小程序的生命周期&lt;/h4&gt;

&lt;p&gt;微信统一提供一个 App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。&lt;/p&gt;

&lt;p&gt;对于小程序的生命周期，只有 『onLaunch——onShow——onHide』 三个阶段。当小程序启动，或从后台进入前台显示，会触发 onShow，当小程序从前台进入后台，会触发 onHide。在任意阶段小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息。&lt;/p&gt;

&lt;p&gt;小程序的销毁时机：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。&lt;/li&gt;
&lt;li&gt;只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-页面的生命周期&#34;&gt;2、页面的生命周期&lt;/h4&gt;

&lt;p&gt;Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。&lt;/p&gt;

&lt;p&gt;小程序页面的生命周期有『onLoad——onShow——onReady——onHide——onUnload』五个阶段。页面加载的时候会触发 onLoad 和 onShow，页面初次渲染完成会触发 onReady，打开新页或切换 tab 的时候会触发 onHide，本页打开新页或者返回上一页触发 onUnload。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/mina-lifecycle.png&#34; alt=&#34;页面的生命周期&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;探索-登录&#34;&gt;探索 &amp;gt; 登录&lt;/h3&gt;

&lt;p&gt;小程序中的登录接口（wx.login）只返回了一个登录凭证（code），需要后端请求一个微信提供的接口，换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的会话密钥（session_key）。用户数据的加解密通讯需要依赖会话密钥完成。wx.login 的调用会发起一次权限请求弹窗，用户允许登录后，回调内容会带上 code（有效期五分钟）。&lt;/p&gt;

&lt;p&gt;当我们通过接口拿到登录凭证 code 提交给后端，后端生成一个 3rd_session，前端将 3rd_session 存到本地，以便以后每次请求都带上用于标示唯一用户，支付，反作弊等验证。具体的交互图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/login.png&#34; alt=&#34;交互图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 wx.login() 获取到用户登录态之后，需要维护登录态。开发者要注意不应该直接把 session_key、openid 等字段作为用户的标识或者 session 的标识，而应该自己派发一个 session 登录态（请参考登录时序图）。对于开发者自己生成的 session，应该保证其安全性且不应该设置较长的过期时间。session 派发到小程序客户端之后，可将其存储在 storage ，用于后续通信使用。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;综上所述，小程序技术对于有一定基础的前端开发者而言是非常的易于上手，同时微信平台高度精准的封装也预示着小程序的开发门槛更低，开发效率更高。我们在使用小程序方便快捷的技术的同时，对于这类平台我们有很多可以学习的地方。这个类平台不是第一次出现，早在2015年百度糯米也在做类似的平台，以快速迭代和各业务开发解藕著名。糯米外卖就是其中一例。该平台提供了各种封装好的原生能力供开发者使用。微信平台上线前的开发语言封装，开发工具的提供做的很好。糯米平台做的较好的部分是上线方便快捷，以及线上监控和数据收集非常的完善。同时微信对浏览器内核改造来支持新的模版语言，这点也是做的非常的深入。总之希望后续小程序有更多新能力的提供，给各位开发者带来更多的挑战！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>