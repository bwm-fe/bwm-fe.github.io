<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on 新品前端@百度外卖</title>
    <link>https://bwm-fe.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml</link>
    <description>Recent content in 前端 on 新品前端@百度外卖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://bwm-fe.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>前型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post5/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/b355eb94jw1f5zol834y0j21w01w0hdt.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post3/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/b355eb94jw1f4r51xizq2j21w01w0b29.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模型组件抽</title>
      <link>https://bwm-fe.github.io/post/post1/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wx2.sinaimg.cn/mw690/b355eb94ly1fb9oohjfddj21w01w0kjl.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post2/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://fe.ele.me/content/images/2016/09/hire.png&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模集成实践</title>
      <link>https://bwm-fe.github.io/post/post4/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post4/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/b355eb94gw1fa0exw9nw1j21vy1vy7vx.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>务模型组件</title>
      <link>https://bwm-fe.github.io/post/post6/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post6/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/b355eb94jw1f4v5x4593uj21jk1jk4qp.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>