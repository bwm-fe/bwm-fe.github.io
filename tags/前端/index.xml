<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on 新品前端@百度外卖</title>
    <link>https://bwm-fe.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml</link>
    <description>Recent content in 前端 on 新品前端@百度外卖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://bwm-fe.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>前端业务模型组件抽象集成实践 - 林溪</title>
      <link>https://bwm-fe.github.io/post/components/</link>
      <pubDate>Tue, 14 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/components/</guid>
      <description>

&lt;div
    style=&#34;
        background-size: cover;
        background-repeat: no-repeat;
        width: 100%;
        min-height: 400px;
    &#34;
    data-src=&#34;/images/components/header.png&#34;
    class=&#34;blured-image w3-card-8 filter-blur-15&#34;
&gt;
&lt;/div&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;在组件化开发的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。&lt;/p&gt;

&lt;p&gt;2016年 github 上星最多的 10 个开源项目中，第5名是 React，第6名是 angular.js，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于 FIS 的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug 数也明显下降。组件化带来了生产力的提升&lt;/p&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;p&gt;以几个业务系统为例，以下是我们商超运营后端，生态链仓储和电销系统的界面截图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/components/shop.png&#34; alt=&#34;商超&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/components/ecochain.png&#34; alt=&#34;生态链&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/components/dianxiao.png&#34; alt=&#34;电销&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到运营后台系统的界面还是很有规律的，其实MIS系统绝大部分界面也就是增删改查。从现在的几个业务来看，增删改查的需求，类似图上的界面保守的说能占到50%。而现在我们还在重复的写着这些页面，重复着代码复制，修改这样的工作。&lt;/p&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;

&lt;h3 id=&#34;业务模型组件分析&#34;&gt;业务模型组件分析&lt;/h3&gt;

&lt;p&gt;页面基本上回包含检索区，操作按钮区，数据表格区，分页区。每一个页面请求不同的服务。检索，分页用户操作都是一样的，可以通用处理。不同的是检索区，操作事件，表格的每一列肯定是不一样的，用户能自行进行配置。还有一个不一样的是请求的服务，需要指定使用的服务地址。&lt;/p&gt;

&lt;h3 id=&#34;业务模型组件设计原则&#34;&gt;业务模型组件设计原则&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;约定大于配置。通过一些强制约定简化配置。&lt;/li&gt;
&lt;li&gt;保持配置项简单、一致。这一点很重要，保持简单，使用时就不用参照手册，利于使用和推广，但是配置简单势必会牺牲一下灵活性，我最终还是选择了易用性优先，兼顾一部分的灵活性配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;业务模型组件流程图&#34;&gt;业务模型组件流程图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/components/progress.png&#34; alt=&#34;流程图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过配置过滤项生成页面，通过服务配置指定数据获取方式。使用了业务模型组件之后，只处理自组件的用户交互事件，页面上其他事情就不用管了，比如检索按钮，清空按钮，翻页处理等都由大组件集中处理了。&lt;/p&gt;

&lt;h3 id=&#34;业务模型组件实现&#34;&gt;业务模型组件实现&lt;/h3&gt;

&lt;p&gt;我使用 Vue 作为基础库，实现了这个模型，最终代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;xp-searchPage ref=&amp;quot;sp&amp;quot; change={this.filterChange}&amp;gt;
  &amp;lt;xp-filter components={filterComponents}&amp;gt;&amp;lt;/xp-filter&amp;gt;
  &amp;lt;xp-buttonBar components={buttonComponents}&amp;gt;&amp;lt;/xp-buttonBar&amp;gt;
  &amp;lt;xp-table components={tableComponents}&amp;gt;&amp;lt;/xp-table&amp;gt;
&amp;lt;/xp-searchPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-组件使用配置&#34;&gt;1.组件使用配置&lt;/h4&gt;

&lt;p&gt;过滤项的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const filterComponents = [
  {
    component: &#39;Input&#39;,
    label: &#39;手机号&#39;,
    name: &#39;shop_phone&#39;,
    value: utils.getQueryString(&#39;phoneNumber&#39;)
  }, 
  {
    component: &#39;MerchantStatus&#39;,
    label: &#39;商户状态&#39;,
    name: &#39;shop_status&#39;
  },
  .
  .
  .
  {
    component: &#39;Button&#39;,
    label: &#39;查询&#39;,
    name: &#39;submit&#39;,
  }, 
  {
    component: &#39;Reset&#39;,
    label: &#39;重置&#39;,
    name: &#39;reset&#39;
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;过滤项配置规范：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;component&lt;/td&gt;
&lt;td&gt;String Object （VUE组件）&lt;/td&gt;
&lt;td&gt;组件，可以是字符串或者对象；字符串时会动态加载系统提供的组件；对象时直接使用该自定制的组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;过滤项名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;提交时该项的字段名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;默认值&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表格项的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const tableComponents = [
  {
    component: &#39;Text&#39;,
    label: &#39;序号&#39;,
    name: &#39;no&#39;,
    width: 40
  }, 
  {
    component: &#39;Input&#39;,
    label: &#39;项目编号&#39;,
    name: &#39;task_no&#39;,
    width: 120,
    action: this.updateNo
  },
  .
  .
  .
  {
    component: &#39;Command&#39;,
    label: &#39;操作&#39;,
    name: [&#39;分配&#39;, &#39;废弃&#39;],
    action: [this.dispatch, this.drop],
    width: 100
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表格列配置规范：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;component&lt;/td&gt;
&lt;td&gt;String Object （VUE组件）&lt;/td&gt;
&lt;td&gt;组件，可以是字符串或者对象；字符串时会动态加载系统提供的组件；对象时直接使用该自定制的组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;过滤项名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;提交时该项的字段名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;表格列宽度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;单元格事件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;服务配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;filterChange(params, source) {
  console.log(&#39;source:&#39;, source);
  if (source == &#39;button&#39; || source == &#39;pagination&#39;) {
    let pass = true;
    if (params[&#39;shop_phone&#39;] &amp;amp;&amp;amp; !/^1\d{10}$/.test(params[&#39;shop_phone&#39;])) {
      pass = false;
      this.$alert(&#39;请输入正确的手机号&#39;);
      pass = false;
    }
    if (!pass) return;
    return api.getTaskPollList(params);
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;filterChange 需要返回 ajax 请求的 Promise 对象, 在 filterChange 中可以进行校验。&lt;/p&gt;

&lt;h4 id=&#34;2-组件交互图&#34;&gt;2.组件交互图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/components/interaction.png&#34; alt=&#34;交互图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;父组件 xp-searchPage 负责主要的处理逻辑，子组件通过事件与父组件进行交互，父组件将最终数据通过事件通知给 table 组件，最终完成数据的渲染。&lt;/p&gt;

&lt;h4 id=&#34;3-子组件动态加载及渲染&#34;&gt;3.子组件动态加载及渲染&lt;/h4&gt;

&lt;p&gt;如果配置的是系统子组件，即 component 为 string 时，需要动态加载该子组件并动态渲染，首先拼出子组件的路径，通过 require 加载，我使用的是 Vue2.0，用 jsx 方式编写组件，利用 render 方法的参数 createElement 动态创建该组件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render(h) {
  return (
    &amp;lt;div class=&#39;compo-filter&#39;&amp;gt;
      &amp;lt;el-form ref=&amp;quot;form&amp;quot; inline={true}&amp;gt;
        &amp;lt;div class=&amp;quot;filter-area&amp;quot;&amp;gt;
          {
            this.componentsData.map((item, index) =&amp;gt; {
              return h(item.tag, {props: {...item}}, this.$slots.default);
            })
          }
        &amp;lt;/div&amp;gt;
      &amp;lt;/el-form&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;子组件规范&#34;&gt;子组件规范&lt;/h3&gt;

&lt;p&gt;有了框架，我们需要具体实现业务的子组件，只要按照以下规范，所有的组件都能被配置为过滤项或者表格列组件，具体规范如下：&lt;/p&gt;

&lt;h4 id=&#34;1-filter-子组件&#34;&gt;1.filter 子组件&lt;/h4&gt;

&lt;p&gt;filter 组件 props 规范:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lable&lt;/td&gt;
&lt;td&gt;Stirng&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;标签&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;提交数据名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;reset&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;清空操作，让组件清楚用户操作，处于初始状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;默认值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;valueChange&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;将值传递给父组件；this.valueChange(this.name, this.statusModel)；第一个参数：该项ajax请求的key；第二个参数：key对应的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;当过滤项值发生变化时，调用 valueChange，valueChange 可以调用多次，不同的 key 会产生不同的参数，例如，三级联动的省市区选择列表，可以调用三次&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.valueChange(&#39;shop_province_id&#39;, item_id);
this.valueChange(&#39;shop_city_id&#39;, item_id);
this.valueChange(&#39;shop_town_id&#39;, item_id);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统在加载组件时会自动注入并处理 valueChange，使子组件能和 filter 进行交互，当过滤区清空按钮点击时，调用 reset 实现组件重新初始化。&lt;/p&gt;

&lt;h4 id=&#34;2-table子组件&#34;&gt;2.table子组件&lt;/h4&gt;

&lt;p&gt;talbe 列（单元格）组件props规范&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;对应表格行数据的key&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;单元格值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;context&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;整行row数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;单元格事件回调函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;虽然只有4个配置项，但也可以灵活使用，例如系统提供的 Command 列组件，name 是一个数组，只要在编写子组件时，能正确解析属性值，name 属性可以随意传。&lt;/p&gt;

&lt;p&gt;通过自定义 filter 组件和 table 组件，能实现任何个性化的定制，在电销系统中实际使用了这套模型组件系统，也很好的满足业务需求。&lt;/p&gt;

&lt;h3 id=&#34;业务模型组件优点&#34;&gt;业务模型组件优点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;减少开发工作量，让开发者专注于核心业务逻辑的开发&lt;/li&gt;
&lt;li&gt;减少开发时间，提高生产力&lt;/li&gt;
&lt;li&gt;子组件可以复用，随着子组件的积累，更加较少开发量&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;适用范围&#34;&gt;适用范围&lt;/h3&gt;

&lt;p&gt;非常适用于运营后端检索页面及带增删改查等操作的页面。如果页面不是这个逻辑，不推荐强行使用。&lt;/p&gt;

&lt;h3 id=&#34;后续规划&#34;&gt;后续规划&lt;/h3&gt;

&lt;p&gt;使用这个模型，在电销系统中已经尝到甜头了，其实还有一个方面，能提高开发效率，那就是表单自动构建，通过配置，自动生成表单，模型组件和表单组件两者结合起来，绝对是运营后台开发的利器。
表单组件的设计原则和实现方式其实和过滤组件和表格组件是一样的。
另外，我们将会设计一个共享方案，建设一个组件共享平台，将使用这个模型的过滤组件和表格组件都能展示出来，方便复用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>小程序体验 - 吴洋</title>
      <link>https://bwm-fe.github.io/post/22222/</link>
      <pubDate>Mon, 13 Mar 2017 16:55:49 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/22222/</guid>
      <description>

&lt;div
    style=&#34;
        background-size: cover;
        background-repeat: no-repeat;
        width: 100%;
        height: 400px;
    &#34;
    data-src=&#34;/images/mini_program/start_result.png&#34;
    class=&#34;blured-image w3-card-8 filter-blur-15&#34;
&gt;
&lt;/div&gt;

&lt;h3 id=&#34;微信小程序&#34;&gt;微信小程序&lt;/h3&gt;

&lt;p&gt;说到引爆 2017 的前端话题，『微信小程序』当之无愧。微信小程序有着可以不需要下载安装、可以快捷传播和获取、出色使用体验的特点，被腾讯寄于连接用户与服务，实现应用『触手可及』的梦想的希望。&lt;/p&gt;

&lt;p&gt;从技术的角度看，其本质是一款基于微信的 web 离线包，微信开放平台提供了各式各样的动画和 API ，使得小程序的界面和过渡动画也更加美观、原生。用户在小程序里即用即走，不用考虑内存，硬件容量等问题，适合广大低频 APP。&lt;/p&gt;

&lt;h3 id=&#34;走进小程序&#34;&gt;走进小程序&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的技术栈&#34;&gt;1、小程序的技术栈&lt;/h4&gt;

&lt;p&gt;我们已经了解了小程序的产品定位，再看看小程序技术层面的问题。为了开发小程序，小程序对广大开发者提供了 WXML\WXSS 和高度封装的 WXAPI。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;WXML (WeiXin Markup Language)&lt;/dt&gt;
&lt;dd&gt;是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。&lt;/dd&gt;
&lt;dt&gt;WXSS（WeiXin Style Sheets)&lt;/dt&gt;
&lt;dd&gt;是一套样式语言，用于描述 WXML 的组件样式。WXSS 用来决定 WXML 的组件应该怎么显示。&lt;/dd&gt;
&lt;dt&gt;WXAPI&lt;/dt&gt;
&lt;dd&gt;是微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;同时，框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。&lt;/p&gt;

&lt;p&gt;什么是基础组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;组件是视图层的基本组成单元。&lt;/li&gt;
&lt;li&gt;组件自带一些功能与微信风格的样式。&lt;/li&gt;
&lt;li&gt;一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如说微信提供了视图容器 &lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;，可滚动视图区域 &lt;code&gt;&amp;lt;scroll-view&amp;gt;&lt;/code&gt;，滑块视图容器 &lt;code&gt;&amp;lt;swiper&amp;gt;&lt;/code&gt;，将原本开发者熟悉的 HTML 标签做了封装，直接用标签可以实现以前需要引入插件才能实现的滚动或滑块功能。这类高度封装的标签还有滚动选择器 &lt;code&gt;&amp;lt;picker&amp;gt;&lt;/code&gt;，可以用一个标签实现普通选择器，时间选择器，日期选择器。可谓是十分的方便快捷。&lt;/p&gt;

&lt;p&gt;在 JS 封装方面，由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document、window 等。微信的技术架构让我们不再需要直接调用这些习以为常的浏览器对象，用他们的一套技术方案就可以方便快捷的实现原本复杂的逻辑。他们将所有的浏览器对象隐藏，只对开发者提供一个名为 wx 的对象，提供了全面的诸如网络、媒体播放、文件上传、数据缓存、位置、设备信息、界面交互、登录、支付、模版消息等能力。没有了 cookie 的使用，本地缓存相关只能用 wx.setStorage 等 api 可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB。且 localStorage 是永久存储的。&lt;/p&gt;

&lt;h4 id=&#34;2-小程序的开发设置&#34;&gt;2、小程序的开发设置&lt;/h4&gt;

&lt;p&gt;对于小程序开发者，首先要做的是拿到管理员帐号，添加开发者白名单。然后在开发设置页面查看 AppID 和 AppSecret，配置服务器域名。第三步下载开发者工具进行代码的开发和上传。
小程序开发工具，严格规范开发者，每一步都需要扫码验证。同时小程序只支持 https 请求。&lt;/p&gt;

&lt;h3 id=&#34;外卖小程序技术架构&#34;&gt;外卖小程序技术架构&lt;/h3&gt;

&lt;p&gt;按照小程序官方建议的代码框架，小程序的文件结构包含一个描述整体程序的 app 和多个描述各自页面的 page。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/jiagou.png&#34; alt=&#34;外卖小程序技术架构&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app.js&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.json&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共设置。（我们可以对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.wxss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共样式表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;小程序的逻辑结构被微信分为了两个层。他们是这样描述的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这和我们当前使用的 MVVM 框架 vue 类似。但是不完全一样，小程序提供的框架严格禁止对 dom 的操作。
而外卖这边在构建小程序技术框架的时候加入了业务，技术架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/tech-jiagou.png&#34; alt=&#34;小程序技术框架&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pages&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面page&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;components&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;可以组成页面page的通用代码块&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;assets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面引入的静态资源库&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务公共逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;utils&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务需要的工具集&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adapter&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向下微信WXAPI访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;service&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向上服务端接口访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mock&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供本地的数据模拟&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;探索-生命周期&#34;&gt;探索 &amp;gt; 生命周期&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的生命周期&#34;&gt;1、小程序的生命周期&lt;/h4&gt;

&lt;p&gt;微信统一提供一个 App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。&lt;/p&gt;

&lt;p&gt;对于小程序的生命周期，只有 『onLaunch——onShow——onHide』 三个阶段。当小程序启动，或从后台进入前台显示，会触发 onShow，当小程序从前台进入后台，会触发 onHide。在任意阶段小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息。&lt;/p&gt;

&lt;p&gt;小程序的销毁时机：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。&lt;/li&gt;
&lt;li&gt;只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-页面的生命周期&#34;&gt;2、页面的生命周期&lt;/h4&gt;

&lt;p&gt;Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。&lt;/p&gt;

&lt;p&gt;小程序页面的生命周期有『onLoad——onShow——onReady——onHide——onUnload』五个阶段。页面加载的时候会触发 onLoad 和 onShow，页面初次渲染完成会触发 onReady，打开新页或切换 tab 的时候会触发 onHide，本页打开新页或者返回上一页触发 onUnload。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/mina-lifecycle.png&#34; alt=&#34;页面的生命周期&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;探索-登录&#34;&gt;探索 &amp;gt; 登录&lt;/h3&gt;

&lt;p&gt;小程序中的登录接口（wx.login）只返回了一个登录凭证（code），需要后端请求一个微信提供的接口，换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的会话密钥（session_key）。用户数据的加解密通讯需要依赖会话密钥完成。wx.login 的调用会发起一次权限请求弹窗，用户允许登录后，回调内容会带上 code（有效期五分钟）。&lt;/p&gt;

&lt;p&gt;当我们通过接口拿到登录凭证 code 提交给后端，后端生成一个 3rd_session，前端将 3rd_session 存到本地，以便以后每次请求都带上用于标示唯一用户，支付，反作弊等验证。具体的交互图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/login.png&#34; alt=&#34;交互图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 wx.login() 获取到用户登录态之后，需要维护登录态。开发者要注意不应该直接把 session_key、openid 等字段作为用户的标识或者 session 的标识，而应该自己派发一个 session 登录态（请参考登录时序图）。对于开发者自己生成的 session，应该保证其安全性且不应该设置较长的过期时间。session 派发到小程序客户端之后，可将其存储在 storage ，用于后续通信使用。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;综上所述，小程序技术对于有一定基础的前端开发者而言是非常的易于上手，同时微信平台高度精准的封装也预示着小程序的开发门槛更低，开发效率更高。我们在使用小程序方便快捷的技术的同时，对于这类平台我们有很多可以学习的地方。这个类平台不是第一次出现，早在2015年百度糯米也在做类似的平台，以快速迭代和各业务开发解藕著名。糯米外卖就是其中一例。该平台提供了各种封装好的原生能力供开发者使用。微信平台上线前的开发语言封装，开发工具的提供做的很好。糯米平台做的较好的部分是上线方便快捷，以及线上监控和数据收集非常的完善。同时微信对浏览器内核改造来支持新的模版语言，这点也是做的非常的深入。总之希望后续小程序有更多新能力的提供，给各位开发者带来更多的挑战！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>小程序技术初体验 - 吴洋</title>
      <link>https://bwm-fe.github.io/post/mini_program/</link>
      <pubDate>Mon, 13 Mar 2017 16:55:49 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/mini_program/</guid>
      <description>

&lt;div
    style=&#34;
        background-size: cover;
        background-repeat: no-repeat;
        width: 100%;
        height: 400px;
    &#34;
    data-src=&#34;/images/mini_program/start_result.png&#34;
    class=&#34;blured-image w3-card-8 filter-blur-15&#34;
&gt;
&lt;/div&gt;

&lt;h3 id=&#34;微信小程序&#34;&gt;微信小程序&lt;/h3&gt;

&lt;p&gt;说到引爆 2017 的前端话题，『微信小程序』当之无愧。微信小程序有着可以不需要下载安装、可以快捷传播和获取、出色使用体验的特点，被腾讯寄于连接用户与服务，实现应用『触手可及』的梦想的希望。&lt;/p&gt;

&lt;p&gt;从技术的角度看，其本质是一款基于微信的 web 离线包，微信开放平台提供了各式各样的动画和 API ，使得小程序的界面和过渡动画也更加美观、原生。用户在小程序里即用即走，不用考虑内存，硬件容量等问题，适合广大低频 APP。&lt;/p&gt;

&lt;h3 id=&#34;走进小程序&#34;&gt;走进小程序&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的技术栈&#34;&gt;1、小程序的技术栈&lt;/h4&gt;

&lt;p&gt;我们已经了解了小程序的产品定位，再看看小程序技术层面的问题。为了开发小程序，小程序对广大开发者提供了 WXML\WXSS 和高度封装的 WXAPI。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;WXML (WeiXin Markup Language)&lt;/dt&gt;
&lt;dd&gt;是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。&lt;/dd&gt;
&lt;dt&gt;WXSS（WeiXin Style Sheets)&lt;/dt&gt;
&lt;dd&gt;是一套样式语言，用于描述 WXML 的组件样式。WXSS 用来决定 WXML 的组件应该怎么显示。&lt;/dd&gt;
&lt;dt&gt;WXAPI&lt;/dt&gt;
&lt;dd&gt;是微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;同时，框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。&lt;/p&gt;

&lt;p&gt;什么是基础组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;组件是视图层的基本组成单元。&lt;/li&gt;
&lt;li&gt;组件自带一些功能与微信风格的样式。&lt;/li&gt;
&lt;li&gt;一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如说微信提供了视图容器 &lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;，可滚动视图区域 &lt;code&gt;&amp;lt;scroll-view&amp;gt;&lt;/code&gt;，滑块视图容器 &lt;code&gt;&amp;lt;swiper&amp;gt;&lt;/code&gt;，将原本开发者熟悉的 HTML 标签做了封装，直接用标签可以实现以前需要引入插件才能实现的滚动或滑块功能。这类高度封装的标签还有滚动选择器 &lt;code&gt;&amp;lt;picker&amp;gt;&lt;/code&gt;，可以用一个标签实现普通选择器，时间选择器，日期选择器。可谓是十分的方便快捷。&lt;/p&gt;

&lt;p&gt;在 JS 封装方面，由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document、window 等。微信的技术架构让我们不再需要直接调用这些习以为常的浏览器对象，用他们的一套技术方案就可以方便快捷的实现原本复杂的逻辑。他们将所有的浏览器对象隐藏，只对开发者提供一个名为 wx 的对象，提供了全面的诸如网络、媒体播放、文件上传、数据缓存、位置、设备信息、界面交互、登录、支付、模版消息等能力。没有了 cookie 的使用，本地缓存相关只能用 wx.setStorage 等 api 可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB。且 localStorage 是永久存储的。&lt;/p&gt;

&lt;h4 id=&#34;2-小程序的开发设置&#34;&gt;2、小程序的开发设置&lt;/h4&gt;

&lt;p&gt;对于小程序开发者，首先要做的是拿到管理员帐号，添加开发者白名单。然后在开发设置页面查看 AppID 和 AppSecret，配置服务器域名。第三步下载开发者工具进行代码的开发和上传。
小程序开发工具，严格规范开发者，每一步都需要扫码验证。同时小程序只支持 https 请求。&lt;/p&gt;

&lt;h3 id=&#34;外卖小程序技术架构&#34;&gt;外卖小程序技术架构&lt;/h3&gt;

&lt;p&gt;按照小程序官方建议的代码框架，小程序的文件结构包含一个描述整体程序的 app 和多个描述各自页面的 page。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/jiagou.png&#34; alt=&#34;外卖小程序技术架构&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app.js&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.json&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共设置。（我们可以对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;app.wxss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小程序公共样式表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;小程序的逻辑结构被微信分为了两个层。他们是这样描述的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这和我们当前使用的 MVVM 框架 vue 类似。但是不完全一样，小程序提供的框架严格禁止对 dom 的操作。
而外卖这边在构建小程序技术框架的时候加入了业务，技术架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/tech-jiagou.png&#34; alt=&#34;小程序技术框架&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pages&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面page&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;components&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;可以组成页面page的通用代码块&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;assets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖页面引入的静态资源库&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务公共逻辑&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;utils&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;外卖业务需要的工具集&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adapter&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向下微信WXAPI访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;service&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供向上服务端接口访问&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mock&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;统一提供本地的数据模拟&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;探索-生命周期&#34;&gt;探索 &amp;gt; 生命周期&lt;/h3&gt;

&lt;h4 id=&#34;1-小程序的生命周期&#34;&gt;1、小程序的生命周期&lt;/h4&gt;

&lt;p&gt;微信统一提供一个 App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。&lt;/p&gt;

&lt;p&gt;对于小程序的生命周期，只有 『onLaunch——onShow——onHide』 三个阶段。当小程序启动，或从后台进入前台显示，会触发 onShow，当小程序从前台进入后台，会触发 onHide。在任意阶段小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息。&lt;/p&gt;

&lt;p&gt;小程序的销毁时机：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。&lt;/li&gt;
&lt;li&gt;只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-页面的生命周期&#34;&gt;2、页面的生命周期&lt;/h4&gt;

&lt;p&gt;Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。&lt;/p&gt;

&lt;p&gt;小程序页面的生命周期有『onLoad——onShow——onReady——onHide——onUnload』五个阶段。页面加载的时候会触发 onLoad 和 onShow，页面初次渲染完成会触发 onReady，打开新页或切换 tab 的时候会触发 onHide，本页打开新页或者返回上一页触发 onUnload。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/mina-lifecycle.png&#34; alt=&#34;页面的生命周期&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;探索-登录&#34;&gt;探索 &amp;gt; 登录&lt;/h3&gt;

&lt;p&gt;小程序中的登录接口（wx.login）只返回了一个登录凭证（code），需要后端请求一个微信提供的接口，换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的会话密钥（session_key）。用户数据的加解密通讯需要依赖会话密钥完成。wx.login 的调用会发起一次权限请求弹窗，用户允许登录后，回调内容会带上 code（有效期五分钟）。&lt;/p&gt;

&lt;p&gt;当我们通过接口拿到登录凭证 code 提交给后端，后端生成一个 3rd_session，前端将 3rd_session 存到本地，以便以后每次请求都带上用于标示唯一用户，支付，反作弊等验证。具体的交互图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bwm-fe.github.io/images/mini_program/login.png&#34; alt=&#34;交互图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 wx.login() 获取到用户登录态之后，需要维护登录态。开发者要注意不应该直接把 session_key、openid 等字段作为用户的标识或者 session 的标识，而应该自己派发一个 session 登录态（请参考登录时序图）。对于开发者自己生成的 session，应该保证其安全性且不应该设置较长的过期时间。session 派发到小程序客户端之后，可将其存储在 storage ，用于后续通信使用。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;综上所述，小程序技术对于有一定基础的前端开发者而言是非常的易于上手，同时微信平台高度精准的封装也预示着小程序的开发门槛更低，开发效率更高。我们在使用小程序方便快捷的技术的同时，对于这类平台我们有很多可以学习的地方。这个类平台不是第一次出现，早在2015年百度糯米也在做类似的平台，以快速迭代和各业务开发解藕著名。糯米外卖就是其中一例。该平台提供了各种封装好的原生能力供开发者使用。微信平台上线前的开发语言封装，开发工具的提供做的很好。糯米平台做的较好的部分是上线方便快捷，以及线上监控和数据收集非常的完善。同时微信对浏览器内核改造来支持新的模版语言，这点也是做的非常的深入。总之希望后续小程序有更多新能力的提供，给各位开发者带来更多的挑战！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>