<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>新品前端@百度外卖</title>
    <link>https://bwm-fe.github.io/index.xml</link>
    <description>Recent content on 新品前端@百度外卖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2017 17:11:31 +0800</lastBuildDate>
    <atom:link href="https://bwm-fe.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>前型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post5/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/b355eb94jw1f5zol834y0j21w01w0hdt.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post3/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/b355eb94jw1f4r51xizq2j21w01w0b29.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模型组件抽</title>
      <link>https://bwm-fe.github.io/post/post1/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wx2.sinaimg.cn/mw690/b355eb94ly1fb9oohjfddj21w01w0kjl.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模型组件抽象集成实践</title>
      <link>https://bwm-fe.github.io/post/post2/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://fe.ele.me/content/images/2016/09/hire.png&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端业务模集成实践</title>
      <link>https://bwm-fe.github.io/post/post4/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post4/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw690/b355eb94gw1fa0exw9nw1j21vy1vy7vx.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>务模型组件</title>
      <link>https://bwm-fe.github.io/post/post6/</link>
      <pubDate>Mon, 13 Mar 2017 17:11:31 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/post6/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/mw690/b355eb94jw1f4v5x4593uj21jk1jk4qp.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;组件化开发&lt;/code&gt;的基础上，对营运后端占业务总量50%以上的检索页面模型进行抽象，集成了检索模型组件，通过配置生成最终页面，减少了重复劳动，提高了组件复用，同时也提高了开发效率。本文详细介绍模型组件的使用，设计原则和实现方案及后续即将集成的表单模型组件，最终彻底去除重复劳动。
这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2016年 github 上星最多的10个开源项目中，第5名是 React，~~ 第6名是 angular.js ~~，这两个都是前端最热的组件化解决方案之一，组件化已经是大势所趋。新品类也紧跟技术大潮步伐，在运营后端和用户端上都使用组件化思想开发。在运营后端上，在组件化方案之前，运营后端绝大部分是用基于FIS的解决方案，开发中需要自己编写组件，现在得益于 React 和 React 丰富的组件生态，开源的 React 组件库 antd 基本上能满足我们所有业务开发，组件化解决方案已经展现出他极大优越性，在开发效率上有极大的提升，bug数也明显下降。组件化带来了生产力的提升。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#el {
  margin: 0 auto;
}
#el {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const el = document.querySelector(&#39;#inp&#39;);

if (localStorage.getItem(&#39;inpCon&#39;) === undefined) {
  localStorage.setItem(&#39;inpCon&#39;, &#39;&#39;)
}

el.value = localStorage.getItem(&#39;inpCon&#39;);

el.addEventListener(&#39;change&#39;, () =&amp;gt; {
  localStorage.setItem(&#39;inpCon&#39;, el.value);
}, false);

window.addEventListener(&amp;quot;storage&amp;quot;, () =&amp;gt; {
  el.value = localStorage.getItem(&#39;inpCon&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像蒸汽机的发明替代了手工劳动，使人们感到幸福，电气时代替代蒸汽机，使人们得到享受，而人工智能时代用机器替代人类枯燥的劳动，人们变成绝对的主宰；组件化使前端进入电气时代，下一个时代就是用智能去除枯燥重复的劳动。而当前我们在运营后端的开发上确实存在重复劳动。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;分析系统特征，将通用部分，抽象建模进行集成，工厂式量产替代小手工生产，提高人效，是我们一直要追求的目标。基于现在的组件化方案，集成规模更大的组件，通过配置满足不同的需求，也是可行的。所以设计实现了这样的一个业务组件模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://bwm-fe.github.io/post/about/</link>
      <pubDate>Mon, 13 Mar 2017 16:55:49 +0800</pubDate>
      
      <guid>https://bwm-fe.github.io/post/about/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://blog.zenithar.org/images/articles/2016/canada/quebec.jpg&#34; alt=&#34;文章图片&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zybuluo.com/mdeditor&#34; title=&#34;作业部落旗下 Cmd 在线 Markdown 编辑阅读器&#34;&gt;『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;cmd-markdown-简明语法手册&#34;&gt;Cmd Markdown 简明语法手册&lt;/h1&gt;

&lt;p&gt;标签： Cmd-Markdown&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-斜体和粗体&#34;&gt;1. 斜体和粗体&lt;/h3&gt;

&lt;p&gt;使用 * 和 ** 表示斜体和粗体。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;这是 *斜体*，这是 &lt;strong&gt;粗体&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;2-分级标题&#34;&gt;2. 分级标题&lt;/h3&gt;

&lt;p&gt;使用 === 表示一级标题，使用 &amp;mdash; 表示二级标题。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个一级标题
============================

这是一个二级标题
--------------------------------------------------

### 这是一个三级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。&lt;/p&gt;

&lt;h3 id=&#34;3-外链接&#34;&gt;3. 外链接&lt;/h3&gt;

&lt;p&gt;使用 [描述](链接地址) 为文字增加外链接。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;这是去往 &lt;a href=&#34;http://ghosertblog.github.com&#34;&gt;本人博客&lt;/a&gt; 的链接。&lt;/p&gt;

&lt;h3 id=&#34;4-无序列表&#34;&gt;4. 无序列表&lt;/h3&gt;

&lt;p&gt;使用 *，+，- 表示无序列表。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无序列表项 一&lt;/li&gt;
&lt;li&gt;无序列表项 二&lt;/li&gt;
&lt;li&gt;无序列表项 三&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-有序列表&#34;&gt;5. 有序列表&lt;/h3&gt;

&lt;p&gt;使用数字和点表示有序列表。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;有序列表项 一&lt;/li&gt;
&lt;li&gt;有序列表项 二&lt;/li&gt;
&lt;li&gt;有序列表项 三&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;6-文字引用&#34;&gt;6. 文字引用&lt;/h3&gt;

&lt;p&gt;使用 &amp;gt; 表示文字引用。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;野火烧不尽，春风吹又生。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;7-行内代码块&#34;&gt;7. 行内代码块&lt;/h3&gt;

&lt;p&gt;使用 `代码` 表示行内代码块。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;让我们聊聊 &lt;code&gt;html&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;8-代码块&#34;&gt;8.  代码块&lt;/h3&gt;

&lt;p&gt;使用 四个缩进空格 表示代码块。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码块，此行左侧有四个不可见的空格。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-插入图像&#34;&gt;9.  插入图像&lt;/h3&gt;

&lt;p&gt;使用 ![描述](图片链接地址) 插入图像。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/my_head.jpg&#34; alt=&#34;我的头像&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;cmd-markdown-高阶语法手册&#34;&gt;Cmd Markdown 高阶语法手册&lt;/h1&gt;

&lt;h3 id=&#34;1-内容目录&#34;&gt;1. 内容目录&lt;/h3&gt;

&lt;p&gt;在段落中填写 &lt;code&gt;[TOC]&lt;/code&gt; 以显示全文内容的目录结构。&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h3 id=&#34;2-标签分类&#34;&gt;2. 标签分类&lt;/h3&gt;

&lt;p&gt;在编辑区任意行的列首位置输入以下代码给文稿标签：&lt;/p&gt;

&lt;p&gt;标签： 数学 英语 Markdown&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;Tags： 数学 英语 Markdown&lt;/p&gt;

&lt;h3 id=&#34;3-删除线&#34;&gt;3. 删除线&lt;/h3&gt;

&lt;p&gt;使用 ~~ 表示删除线。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;这是一段错误本。&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-注脚&#34;&gt;4. 注脚&lt;/h3&gt;

&lt;p&gt;使用 [^keyword] 表示注脚。&lt;/p&gt;

&lt;p&gt;这是一个注脚&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:footnote&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的样例。&lt;/p&gt;

&lt;p&gt;这是第二个注脚&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:footnote2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:footnote2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;的样例。&lt;/p&gt;

&lt;h3 id=&#34;5-latex-公式&#34;&gt;5. LaTeX 公式&lt;/h3&gt;

&lt;p&gt;$ 表示行内公式：&lt;/p&gt;

&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;

&lt;p&gt;$$ 表示整行公式：&lt;/p&gt;

&lt;p&gt;$$\sum_{i=1}^n a_i=0$$&lt;/p&gt;

&lt;p&gt;$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$&lt;/p&gt;

&lt;p&gt;$$\sum^{j-1}&lt;em&gt;{k=0}{\widehat{\gamma}&lt;/em&gt;{kj} z_k}$$&lt;/p&gt;

&lt;p&gt;访问 &lt;a href=&#34;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;MathJax&lt;/a&gt; 参考更多使用方法。&lt;/p&gt;

&lt;h3 id=&#34;6-加强的代码块&#34;&gt;6. 加强的代码块&lt;/h3&gt;

&lt;p&gt;支持四十一种编程语言的语法高亮的显示，行号显示。&lt;/p&gt;

&lt;p&gt;非代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install vim-gnome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript 示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
* nth element in the fibonacci series.
* @param n &amp;gt;= 0
* @return the nth element, &amp;gt;= 0.
*/
function fib(n) {
  var a = 1, b = 1;
  var tmp;
  while (--n &amp;gt;= 0) {
    tmp = a;
    a += b;
    b = tmp;
  }
  return a;
}

document.write(fib(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-流程图&#34;&gt;7. 流程图&lt;/h3&gt;

&lt;h4 id=&#34;示例&#34;&gt;示例&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-flow&#34;&gt;st=&amp;gt;start: Start:&amp;gt;https://www.zybuluo.com
io=&amp;gt;inputoutput: verification
op=&amp;gt;operation: Your Operation
cond=&amp;gt;condition: Yes or No?
sub=&amp;gt;subroutine: Your Subroutine
e=&amp;gt;end

st-&amp;gt;io-&amp;gt;op-&amp;gt;cond
cond(yes)-&amp;gt;e
cond(no)-&amp;gt;sub-&amp;gt;io
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;更多语法参考-流程图语法参考-http-adrai-github-io-flowchart-js&#34;&gt;更多语法参考：&lt;a href=&#34;http://adrai.github.io/flowchart.js/&#34;&gt;流程图语法参考&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id=&#34;8-序列图&#34;&gt;8. 序列图&lt;/h3&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-seq&#34;&gt;Alice-&amp;gt;Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob--&amp;gt;Alice: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-seq&#34;&gt;Title: Here is a title
A-&amp;gt;B: Normal line
B--&amp;gt;C: Dashed line
C-&amp;gt;&amp;gt;D: Open arrow
D--&amp;gt;&amp;gt;A: Dashed open arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;更多语法参考-序列图语法参考-http-bramp-github-io-js-sequence-diagrams&#34;&gt;更多语法参考：&lt;a href=&#34;http://bramp.github.io/js-sequence-diagrams/&#34;&gt;序列图语法参考&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id=&#34;9-表格支持&#34;&gt;9. 表格支持&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;10-定义型列表&#34;&gt;10. 定义型列表&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;名词 1&lt;/dt&gt;
&lt;dd&gt;定义 1（左侧有一个可见的冒号和四个不可见的空格）&lt;/dd&gt;
&lt;dt&gt;代码块 2&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码块（左侧有八个不可见的空格）
&lt;/code&gt;&lt;/pre&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;11-html-标签&#34;&gt;11. Html 标签&lt;/h3&gt;

&lt;p&gt;本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th rowspan=&amp;quot;2&amp;quot;&amp;gt;值班人员&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期一&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期二&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期三&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;李强&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;张明&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;王平&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&#34;2&#34;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;12-内嵌图标&#34;&gt;12. 内嵌图标&lt;/h3&gt;

&lt;p&gt;本站的图标系统对外开放，在文档中输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;icon-weibo&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即显示微博的图标： &lt;i class=&#34;icon-weibo icon-2x&#34;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;替换 上述 &lt;code&gt;i 标签&lt;/code&gt; 内的 &lt;code&gt;icon-weibo&lt;/code&gt; 以显示不同的图标，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;icon-renren&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即显示人人的图标： &lt;i class=&#34;icon-renren icon-2x&#34;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;更多的图标和玩法可以参看 &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/3.2.1/icons/&#34;&gt;font-awesome&lt;/a&gt; 官方网站。&lt;/p&gt;

&lt;h3 id=&#34;13-待办事宜-todo-列表&#34;&gt;13. 待办事宜 Todo 列表&lt;/h3&gt;

&lt;p&gt;使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应显示如下待办事宜 Todo 列表：&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;Cmd Markdown 开发&lt;/strong&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 支持以 PDF 格式导出文稿&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增Todo列表功能 &lt;a href=&#34;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&#34;&gt;语法参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 改进 LaTex 功能

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 修复 LaTex 公式渲染问题&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增 LaTex 公式编号功能 &lt;a href=&#34;http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers&#34;&gt;语法参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;七月旅行准备&lt;/strong&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 准备邮轮上需要携带的物品&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 浏览日本免税店的物品&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 购买蓝宝石公主号七月一日的船票
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:footnote&#34;&gt;这是一个 &lt;em&gt;注脚&lt;/em&gt; 的 &lt;strong&gt;文本&lt;/strong&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:footnote&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:footnote2&#34;&gt;这是另一个 &lt;em&gt;注脚&lt;/em&gt; 的 &lt;strong&gt;文本&lt;/strong&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:footnote2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>